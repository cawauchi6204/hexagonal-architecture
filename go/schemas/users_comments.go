// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schemas

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsersComment is an object representing the database table.
type UsersComment struct {
	ID        string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    null.String `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	CommentID null.String `boil:"comment_id" json:"comment_id,omitempty" toml:"comment_id" yaml:"comment_id,omitempty"`
	IsLike    bool        `boil:"is_like" json:"is_like" toml:"is_like" yaml:"is_like"`
	CreatedAt null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *usersCommentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L usersCommentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsersCommentColumns = struct {
	ID        string
	UserID    string
	CommentID string
	IsLike    string
	CreatedAt string
}{
	ID:        "id",
	UserID:    "user_id",
	CommentID: "comment_id",
	IsLike:    "is_like",
	CreatedAt: "created_at",
}

var UsersCommentTableColumns = struct {
	ID        string
	UserID    string
	CommentID string
	IsLike    string
	CreatedAt string
}{
	ID:        "users_comments.id",
	UserID:    "users_comments.user_id",
	CommentID: "users_comments.comment_id",
	IsLike:    "users_comments.is_like",
	CreatedAt: "users_comments.created_at",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var UsersCommentWhere = struct {
	ID        whereHelperstring
	UserID    whereHelpernull_String
	CommentID whereHelpernull_String
	IsLike    whereHelperbool
	CreatedAt whereHelpernull_Time
}{
	ID:        whereHelperstring{field: "`users_comments`.`id`"},
	UserID:    whereHelpernull_String{field: "`users_comments`.`user_id`"},
	CommentID: whereHelpernull_String{field: "`users_comments`.`comment_id`"},
	IsLike:    whereHelperbool{field: "`users_comments`.`is_like`"},
	CreatedAt: whereHelpernull_Time{field: "`users_comments`.`created_at`"},
}

// UsersCommentRels is where relationship names are stored.
var UsersCommentRels = struct {
	User    string
	Comment string
}{
	User:    "User",
	Comment: "Comment",
}

// usersCommentR is where relationships are stored.
type usersCommentR struct {
	User    *User    `boil:"User" json:"User" toml:"User" yaml:"User"`
	Comment *Comment `boil:"Comment" json:"Comment" toml:"Comment" yaml:"Comment"`
}

// NewStruct creates a new relationship struct
func (*usersCommentR) NewStruct() *usersCommentR {
	return &usersCommentR{}
}

func (r *usersCommentR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *usersCommentR) GetComment() *Comment {
	if r == nil {
		return nil
	}
	return r.Comment
}

// usersCommentL is where Load methods for each relationship are stored.
type usersCommentL struct{}

var (
	usersCommentAllColumns            = []string{"id", "user_id", "comment_id", "is_like", "created_at"}
	usersCommentColumnsWithoutDefault = []string{"id", "user_id", "comment_id", "is_like"}
	usersCommentColumnsWithDefault    = []string{"created_at"}
	usersCommentPrimaryKeyColumns     = []string{"id"}
	usersCommentGeneratedColumns      = []string{}
)

type (
	// UsersCommentSlice is an alias for a slice of pointers to UsersComment.
	// This should almost always be used instead of []UsersComment.
	UsersCommentSlice []*UsersComment
	// UsersCommentHook is the signature for custom UsersComment hook methods
	UsersCommentHook func(context.Context, boil.ContextExecutor, *UsersComment) error

	usersCommentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usersCommentType                 = reflect.TypeOf(&UsersComment{})
	usersCommentMapping              = queries.MakeStructMapping(usersCommentType)
	usersCommentPrimaryKeyMapping, _ = queries.BindMapping(usersCommentType, usersCommentMapping, usersCommentPrimaryKeyColumns)
	usersCommentInsertCacheMut       sync.RWMutex
	usersCommentInsertCache          = make(map[string]insertCache)
	usersCommentUpdateCacheMut       sync.RWMutex
	usersCommentUpdateCache          = make(map[string]updateCache)
	usersCommentUpsertCacheMut       sync.RWMutex
	usersCommentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usersCommentAfterSelectMu sync.Mutex
var usersCommentAfterSelectHooks []UsersCommentHook

var usersCommentBeforeInsertMu sync.Mutex
var usersCommentBeforeInsertHooks []UsersCommentHook
var usersCommentAfterInsertMu sync.Mutex
var usersCommentAfterInsertHooks []UsersCommentHook

var usersCommentBeforeUpdateMu sync.Mutex
var usersCommentBeforeUpdateHooks []UsersCommentHook
var usersCommentAfterUpdateMu sync.Mutex
var usersCommentAfterUpdateHooks []UsersCommentHook

var usersCommentBeforeDeleteMu sync.Mutex
var usersCommentBeforeDeleteHooks []UsersCommentHook
var usersCommentAfterDeleteMu sync.Mutex
var usersCommentAfterDeleteHooks []UsersCommentHook

var usersCommentBeforeUpsertMu sync.Mutex
var usersCommentBeforeUpsertHooks []UsersCommentHook
var usersCommentAfterUpsertMu sync.Mutex
var usersCommentAfterUpsertHooks []UsersCommentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsersComment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCommentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsersComment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCommentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsersComment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCommentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsersComment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCommentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsersComment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCommentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsersComment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCommentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsersComment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCommentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsersComment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCommentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsersComment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCommentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsersCommentHook registers your hook function for all future operations.
func AddUsersCommentHook(hookPoint boil.HookPoint, usersCommentHook UsersCommentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usersCommentAfterSelectMu.Lock()
		usersCommentAfterSelectHooks = append(usersCommentAfterSelectHooks, usersCommentHook)
		usersCommentAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		usersCommentBeforeInsertMu.Lock()
		usersCommentBeforeInsertHooks = append(usersCommentBeforeInsertHooks, usersCommentHook)
		usersCommentBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		usersCommentAfterInsertMu.Lock()
		usersCommentAfterInsertHooks = append(usersCommentAfterInsertHooks, usersCommentHook)
		usersCommentAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		usersCommentBeforeUpdateMu.Lock()
		usersCommentBeforeUpdateHooks = append(usersCommentBeforeUpdateHooks, usersCommentHook)
		usersCommentBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		usersCommentAfterUpdateMu.Lock()
		usersCommentAfterUpdateHooks = append(usersCommentAfterUpdateHooks, usersCommentHook)
		usersCommentAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		usersCommentBeforeDeleteMu.Lock()
		usersCommentBeforeDeleteHooks = append(usersCommentBeforeDeleteHooks, usersCommentHook)
		usersCommentBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		usersCommentAfterDeleteMu.Lock()
		usersCommentAfterDeleteHooks = append(usersCommentAfterDeleteHooks, usersCommentHook)
		usersCommentAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		usersCommentBeforeUpsertMu.Lock()
		usersCommentBeforeUpsertHooks = append(usersCommentBeforeUpsertHooks, usersCommentHook)
		usersCommentBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		usersCommentAfterUpsertMu.Lock()
		usersCommentAfterUpsertHooks = append(usersCommentAfterUpsertHooks, usersCommentHook)
		usersCommentAfterUpsertMu.Unlock()
	}
}

// One returns a single usersComment record from the query.
func (q usersCommentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsersComment, error) {
	o := &UsersComment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schemas: failed to execute a one query for users_comments")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsersComment records from the query.
func (q usersCommentQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsersCommentSlice, error) {
	var o []*UsersComment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schemas: failed to assign all query results to UsersComment slice")
	}

	if len(usersCommentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsersComment records in the query.
func (q usersCommentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schemas: failed to count users_comments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usersCommentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schemas: failed to check if users_comments exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *UsersComment) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Comment pointed to by the foreign key.
func (o *UsersComment) Comment(mods ...qm.QueryMod) commentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CommentID),
	}

	queryMods = append(queryMods, mods...)

	return Comments(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usersCommentL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsersComment interface{}, mods queries.Applicator) error {
	var slice []*UsersComment
	var object *UsersComment

	if singular {
		var ok bool
		object, ok = maybeUsersComment.(*UsersComment)
		if !ok {
			object = new(UsersComment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUsersComment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUsersComment))
			}
		}
	} else {
		s, ok := maybeUsersComment.(*[]*UsersComment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUsersComment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUsersComment))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &usersCommentR{}
		}
		if !queries.IsNil(object.UserID) {
			args[object.UserID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usersCommentR{}
			}

			if !queries.IsNil(obj.UserID) {
				args[obj.UserID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UsersComments = append(foreign.R.UsersComments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UsersComments = append(foreign.R.UsersComments, local)
				break
			}
		}
	}

	return nil
}

// LoadComment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usersCommentL) LoadComment(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsersComment interface{}, mods queries.Applicator) error {
	var slice []*UsersComment
	var object *UsersComment

	if singular {
		var ok bool
		object, ok = maybeUsersComment.(*UsersComment)
		if !ok {
			object = new(UsersComment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUsersComment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUsersComment))
			}
		}
	} else {
		s, ok := maybeUsersComment.(*[]*UsersComment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUsersComment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUsersComment))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &usersCommentR{}
		}
		if !queries.IsNil(object.CommentID) {
			args[object.CommentID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usersCommentR{}
			}

			if !queries.IsNil(obj.CommentID) {
				args[obj.CommentID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`comments`),
		qm.WhereIn(`comments.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Comment")
	}

	var resultSlice []*Comment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Comment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for comments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for comments")
	}

	if len(commentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Comment = foreign
		if foreign.R == nil {
			foreign.R = &commentR{}
		}
		foreign.R.UsersComments = append(foreign.R.UsersComments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CommentID, foreign.ID) {
				local.R.Comment = foreign
				if foreign.R == nil {
					foreign.R = &commentR{}
				}
				foreign.R.UsersComments = append(foreign.R.UsersComments, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the usersComment to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UsersComments.
func (o *UsersComment) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `users_comments` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, usersCommentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &usersCommentR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UsersComments: UsersCommentSlice{o},
		}
	} else {
		related.R.UsersComments = append(related.R.UsersComments, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct.
func (o *UsersComment) RemoveUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.User = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UsersComments {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.UsersComments)
		if ln > 1 && i < ln-1 {
			related.R.UsersComments[i] = related.R.UsersComments[ln-1]
		}
		related.R.UsersComments = related.R.UsersComments[:ln-1]
		break
	}
	return nil
}

// SetComment of the usersComment to the related item.
// Sets o.R.Comment to related.
// Adds o to related.R.UsersComments.
func (o *UsersComment) SetComment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Comment) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `users_comments` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"comment_id"}),
		strmangle.WhereClause("`", "`", 0, usersCommentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CommentID, related.ID)
	if o.R == nil {
		o.R = &usersCommentR{
			Comment: related,
		}
	} else {
		o.R.Comment = related
	}

	if related.R == nil {
		related.R = &commentR{
			UsersComments: UsersCommentSlice{o},
		}
	} else {
		related.R.UsersComments = append(related.R.UsersComments, o)
	}

	return nil
}

// RemoveComment relationship.
// Sets o.R.Comment to nil.
// Removes o from all passed in related items' relationships struct.
func (o *UsersComment) RemoveComment(ctx context.Context, exec boil.ContextExecutor, related *Comment) error {
	var err error

	queries.SetScanner(&o.CommentID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("comment_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Comment = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UsersComments {
		if queries.Equal(o.CommentID, ri.CommentID) {
			continue
		}

		ln := len(related.R.UsersComments)
		if ln > 1 && i < ln-1 {
			related.R.UsersComments[i] = related.R.UsersComments[ln-1]
		}
		related.R.UsersComments = related.R.UsersComments[:ln-1]
		break
	}
	return nil
}

// UsersComments retrieves all the records using an executor.
func UsersComments(mods ...qm.QueryMod) usersCommentQuery {
	mods = append(mods, qm.From("`users_comments`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`users_comments`.*"})
	}

	return usersCommentQuery{q}
}

// FindUsersComment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsersComment(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*UsersComment, error) {
	usersCommentObj := &UsersComment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `users_comments` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, usersCommentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schemas: unable to select from users_comments")
	}

	if err = usersCommentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usersCommentObj, err
	}

	return usersCommentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsersComment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schemas: no users_comments provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usersCommentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usersCommentInsertCacheMut.RLock()
	cache, cached := usersCommentInsertCache[key]
	usersCommentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usersCommentAllColumns,
			usersCommentColumnsWithDefault,
			usersCommentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usersCommentType, usersCommentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usersCommentType, usersCommentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `users_comments` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `users_comments` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `users_comments` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, usersCommentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "schemas: unable to insert into users_comments")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "schemas: unable to populate default values for users_comments")
	}

CacheNoHooks:
	if !cached {
		usersCommentInsertCacheMut.Lock()
		usersCommentInsertCache[key] = cache
		usersCommentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsersComment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsersComment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usersCommentUpdateCacheMut.RLock()
	cache, cached := usersCommentUpdateCache[key]
	usersCommentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usersCommentAllColumns,
			usersCommentPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("schemas: unable to update users_comments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `users_comments` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, usersCommentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usersCommentType, usersCommentMapping, append(wl, usersCommentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schemas: unable to update users_comments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schemas: failed to get rows affected by update for users_comments")
	}

	if !cached {
		usersCommentUpdateCacheMut.Lock()
		usersCommentUpdateCache[key] = cache
		usersCommentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usersCommentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "schemas: unable to update all for users_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schemas: unable to retrieve rows affected for users_comments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsersCommentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schemas: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `users_comments` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, usersCommentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schemas: unable to update all in usersComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schemas: unable to retrieve rows affected all in update all usersComment")
	}
	return rowsAff, nil
}

var mySQLUsersCommentUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsersComment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("schemas: no users_comments provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usersCommentColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUsersCommentUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usersCommentUpsertCacheMut.RLock()
	cache, cached := usersCommentUpsertCache[key]
	usersCommentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			usersCommentAllColumns,
			usersCommentColumnsWithDefault,
			usersCommentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			usersCommentAllColumns,
			usersCommentPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("schemas: unable to upsert users_comments, could not build update column list")
		}

		ret := strmangle.SetComplement(usersCommentAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`users_comments`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `users_comments` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(usersCommentType, usersCommentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usersCommentType, usersCommentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "schemas: unable to upsert for users_comments")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(usersCommentType, usersCommentMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "schemas: unable to retrieve unique values for users_comments")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "schemas: unable to populate default values for users_comments")
	}

CacheNoHooks:
	if !cached {
		usersCommentUpsertCacheMut.Lock()
		usersCommentUpsertCache[key] = cache
		usersCommentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsersComment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsersComment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("schemas: no UsersComment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usersCommentPrimaryKeyMapping)
	sql := "DELETE FROM `users_comments` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schemas: unable to delete from users_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schemas: failed to get rows affected by delete for users_comments")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usersCommentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schemas: no usersCommentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "schemas: unable to delete all from users_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schemas: failed to get rows affected by deleteall for users_comments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsersCommentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usersCommentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `users_comments` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, usersCommentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schemas: unable to delete all from usersComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schemas: failed to get rows affected by deleteall for users_comments")
	}

	if len(usersCommentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsersComment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsersComment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsersCommentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsersCommentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `users_comments`.* FROM `users_comments` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, usersCommentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schemas: unable to reload all in UsersCommentSlice")
	}

	*o = slice

	return nil
}

// UsersCommentExists checks if the UsersComment row exists.
func UsersCommentExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `users_comments` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schemas: unable to check if users_comments exists")
	}

	return exists, nil
}

// Exists checks if the UsersComment row exists.
func (o *UsersComment) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UsersCommentExists(ctx, exec, o.ID)
}
